# ------------------------------------
# ------------------------------------
#   If you need English case, you can refer to [s_en.yaml] file
# ------------------------------------
#   欢迎您使用阿里云函数计算 FC 组件进行项目开发
#   组件仓库地址：https://github.com/devsapp/fc
#   组件帮助文档：https://www.serverless-devs.com/fc/readme
#   Yaml参考文档：https://www.serverless-devs.com/fc/yaml/readme
#   关于：
#      - Serverless Devs和FC组件的关系、如何声明/部署多个函数、超过50M的代码包如何部署
#      - 关于.fcignore使用方法、工具中.s目录是做什么、函数进行build操作之后如何处理build的产物
#   等问题，可以参考文档：https://www.serverless-devs.com/fc/tips
#   关于如何做CICD等问题，可以参考：https://www.serverless-devs.com/serverless-devs/cicd
#   关于如何进行环境划分等问题，可以参考：https://www.serverless-devs.com/serverless-devs/extend
#   更多函数计算案例，可参考：https://github.com/devsapp/awesome/
#   有问题快来钉钉群问一下吧：33947367
edition: 1.0.0
name: Web IDE
# access 是当前应用所需要的密钥信息配置：
# 密钥配置可以参考：https://www.serverless-devs.com/serverless-devs/command/config
# 密钥使用顺序可以参考：https://www.serverless-devs.com/serverless-devs/tool#密钥使用顺序与规范
access: default

vars: # 全局变量
  region: cn-hangzhou
  name: webide-server
  fcServiceName: ${vars.name}
  fcFunctionName: ${vars.name}-v2

services:
  vscode-server: # 业务名称/模块名称，通常对应 FC 的一个函数。
    # 如果只想针对指定的模块进行相关操作，可以在命令行中加上模块名，例如：
    # 只对 webide-server 进行构建：s webide-server build
    # 如果直接执行 s build，工具则会对当前Yaml下，所有和 webide-server 平级的业务模块（如有其他平级的模块，例如下面注释的next-function），按照一定顺序进行 build 操作
    component: fc # 组件名称，Serverless Devs 工具本身类似于一种游戏机，不具备具体的业务能力，组件类似于游戏卡，用户通过向游戏机中插入不同的游戏卡实现不同的功能，即通过使用不同的组件实现不同的具体业务能力
    # actions: # 自定义执行逻辑，关于actions 的使用，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#行为描述 pre-deploy: # 在deploy之前运行
    #- run: curl -o code.tar.gz https://ghproxy.com/https://github.com/gitpod-io/openvscode-server/releases/download/openvscode-server-v1.66.1/openvscode-server-v1.66.1-linux-x64.tar.gz && rm -rf code && mkdir code && tar zxvf code.tar.gz --strip-components 1 -C code && rm -rf code.tar.gz
    # - run: make release TARGET=fc
    #   path: ./
    #        - component: fc build --use-docker # 要运行的组件，格式为【component: 组件名 命令 参数】（可以通过s cli registry search --type Component 获取组件列表）
    #        - run: docker build xxx          # 要执行的系统命令，类似于一种钩子的形式
    #          path: ./src                    # 执行系统命令/钩子的路径
    #        - plugin: myplugin               # 与运行的插件 （可以通过s cli registry search --type Plugin 获取组件列表）
    #          args:                          # 插件的参数信息
    #            testKey: testValue
    #      post-deploy: # 在deploy之后运行
    #        - component: fc versions publish # 要运行的命令行
    props:
      region: ${vars.region} # 关于变量的使用方法，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#变量赋值
      service:
        name: ${vars.fcServiceName}
        description: "The web ide service."
        logConfig: auto
        role: "acs:ram::1050834996213541:role/AliyunFcDefaultRole" # 授予函数计算所需权限的RAM role, 使用场景包含 1. 把 function产生的 log 发送到用户的 logstore 中 2. 为function 在执行中访问其它云资源生成 token
      function:
        name: ${vars.fcFunctionName}
        description: "The openvscode server function."
        timeout: 900
        memorySize: 3072
        runtime: custom
        layers:
          # 将依赖的三方 openvscode server 打包发布为 FC layer，这样后续只需部署我们自己的代码，不用重复部署 openvscode server.
          - bbcf9e99f23f80d1a56ad2c76334c2af#openvscode-server#8
        codeUri: target
        environmentVariables:
          PATH: >-
            /opt/openvscode-server/bin:/opt/openvscode-server:/usr/local/bin/apache-maven/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/ruby/bin
        customRuntimeConfig:
          command:
            - ./webide-server
          args:
            - -logtostderr=true
        caPort: 8080
        instanceConcurrency: 100
        initializer: /initialize
        initializationTimeout: 120
        instanceLifecycleConfig:
          preStop:
            handler: /pre-stop
            timeout: 600
      #        environmentVariables:
      #          PATH: /code/node-v12.13.0-linux-x64/bin:$PATH
      #        customRuntimeConfig:
      #          command:
      #            - node
      #            - server.js
      triggers:
        - name: http_t
          type: http
          config:
            authType: anonymous
            methods:
              - GET
              - POST
              - PUT
              - DELETE
      # 设置 custom domains，
      customDomains:
        - domainName: auto # 设置为 auto 时，serverless devs 会自动生成测试域名
          protocol: HTTP
          routeConfigs:
            - path: /*
              serviceName: ${vars.fcServiceName}
              functionName: ${vars.fcFunctionName}
              methods:
                - GET
                - POST
                - PUT
                - DELETE
#  next-function: # 第二个函数的案例，仅供参考
#    # 如果在当前项目下执行 s deploy，会同时部署模块：
#    #   WebIDE：服务hello-world-service，函数cpp-event-function
#    #   next-function：服务hello-world-service，函数next-function-example
#    # 如果想单独部署当前服务与函数，可以执行 s + 模块名/业务名 + deploy，例如：s next-function deploy
#    # 如果想单独部署当前函数，可以执行 s + 模块名/业务名 + deploy function，例如：s next-function deploy function
#    # 更多命令可参考：https://www.serverless-devs.com/fc/readme#文档相关
#    component: fc
#    props:
#      region: ${vars.region}
#      service: ${vars.service} # 应用整体的服务配置
#      function: # 定义一个新的函数
#        name: next-function-example
#        description: 'hello world by serverless devs'
